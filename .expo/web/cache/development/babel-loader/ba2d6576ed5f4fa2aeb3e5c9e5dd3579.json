{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\User\\\\Downloads\\\\Fitness-App-master\\\\Fitness-App-master\\\\src\\\\components\\\\ExerciseContext.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, createContext, useEffect } from \"react\";\nimport AsyncStorage from '@react-native-community/async-storage';\nvar ExerciseContext = createContext([{}, function () {}]);\n\nvar ExerciseProvider = function ExerciseProvider(props) {\n  var _useState = useState({\n    counts: {\n      exerciseCount: 0,\n      workoutCount: 0\n    },\n    completedDates: {}\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  useEffect(function () {\n    var load = function load() {\n      var exerciseCount, workoutCount;\n      return _regeneratorRuntime.async(function load$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"MyExerciseCount\"));\n\n            case 3:\n              exerciseCount = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"MyWorkoutCount\"));\n\n            case 6:\n              workoutCount = _context.sent;\n              setState(function (prevState) {\n                return _objectSpread(_objectSpread({}, prevState), {}, {\n                  counts: {\n                    exerciseCount: exerciseCount ? parseInt(exerciseCount) : 0,\n                    workoutCount: workoutCount ? parseInt(workoutCount) : 0\n                  }\n                });\n              });\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n              alert(_context.t0);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 10]], Promise);\n    };\n\n    load();\n  }, []);\n  useEffect(function () {\n    var save = function save() {\n      var jsonExerciseValue, jsonWorkoutValue;\n      return _regeneratorRuntime.async(function save$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              jsonExerciseValue = state.counts.exerciseCount.toString();\n              jsonWorkoutValue = state.counts.workoutCount.toString();\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"MyExerciseCount\", jsonExerciseValue));\n\n            case 5:\n              _context2.next = 7;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"MyWorkoutCount\", jsonWorkoutValue));\n\n            case 7:\n              _context2.next = 12;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](0);\n              alert(_context2.t0);\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 9]], Promise);\n    };\n\n    save();\n  }, [state.counts]);\n  useEffect(function () {\n    var load = function load() {\n      var completedDates;\n      return _regeneratorRuntime.async(function load$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"MyCompletedDates\"));\n\n            case 3:\n              completedDates = _context3.sent;\n              setState(function (prevState) {\n                return _objectSpread(_objectSpread({}, prevState), {}, {\n                  completedDates: JSON.parse(completedDates)\n                });\n              });\n              _context3.next = 10;\n              break;\n\n            case 7:\n              _context3.prev = 7;\n              _context3.t0 = _context3[\"catch\"](0);\n              alert(_context3.t0);\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    };\n\n    load();\n  }, []);\n  useEffect(function () {\n    var save = function save() {\n      var completedDatesValue;\n      return _regeneratorRuntime.async(function save$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              completedDatesValue = JSON.stringify(state.completedDates);\n              _context4.next = 4;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"MyCompletedDates\", completedDatesValue));\n\n            case 4:\n              _context4.next = 9;\n              break;\n\n            case 6:\n              _context4.prev = 6;\n              _context4.t0 = _context4[\"catch\"](0);\n              alert(_context4.t0);\n\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, [[0, 6]], Promise);\n    };\n\n    save();\n  }, [state.completedDates]);\n  useEffect(function () {\n    console.log(\"Count test: \", state.counts.exerciseCount);\n  });\n  return React.createElement(ExerciseContext.Provider, {\n    value: [state, setState],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport { ExerciseContext, ExerciseProvider };","map":{"version":3,"sources":["C:/Users/User/Downloads/Fitness-App-master/Fitness-App-master/src/components/ExerciseContext.js"],"names":["React","useState","createContext","useEffect","AsyncStorage","ExerciseContext","ExerciseProvider","props","counts","exerciseCount","workoutCount","completedDates","state","setState","load","getItem","prevState","parseInt","alert","save","jsonExerciseValue","toString","jsonWorkoutValue","setItem","JSON","parse","completedDatesValue","stringify","console","log","children"],"mappings":"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","sourcesContent":["import React, { useState, createContext, useEffect } from \"react\";\nimport AsyncStorage from '@react-native-community/async-storage';\n\nconst ExerciseContext = createContext([{}, () => {}]);\n\nconst ExerciseProvider = (props) => {\n  const [state, setState] = useState({\n    counts: {\n      exerciseCount: 0,\n      workoutCount: 0,\n    },\n    completedDates: {},\n  });\n\n  useEffect(() => {\n  const load = async () => {\n    try {\n      let exerciseCount = await AsyncStorage.getItem(\"MyExerciseCount\");\n      let workoutCount = await AsyncStorage.getItem(\"MyWorkoutCount\");\n\n      setState((prevState) => ({\n        ...prevState,\n        counts: {\n          exerciseCount: exerciseCount ? parseInt(exerciseCount) : 0,\n          workoutCount: workoutCount ? parseInt(workoutCount) : 0,\n        },\n      }));\n    } catch (err) {\n        alert(err);\n      }\n  };\n\n    load();\n  }, []);\n\n  useEffect(() => {\n    const save = async () => {\n      try {\n        const jsonExerciseValue = state.counts.exerciseCount.toString()\n        const jsonWorkoutValue = state.counts.workoutCount.toString()\n  \n        await AsyncStorage.setItem(\n          \"MyExerciseCount\",\n          jsonExerciseValue\n        );\n        await AsyncStorage.setItem(\n          \"MyWorkoutCount\",\n          jsonWorkoutValue\n        );\n      } catch (err) {\n        alert(err);\n      }\n    };\n  \n      save();\n    }, [state.counts]);\n\n    useEffect(() => {\n      const load = async () => {\n        try {\n          let completedDates = await AsyncStorage.getItem(\"MyCompletedDates\");\n    \n          setState((prevState) => ({\n            ...prevState,\n            completedDates: \n              JSON.parse(completedDates),\n          }));\n        } catch (err) {\n            alert(err);\n          }\n      };\n    \n        load();\n      }, []);\n\n    useEffect(() => {\n      const save = async () => {\n        try {\n          const completedDatesValue = JSON.stringify(state.completedDates)\n    \n          await AsyncStorage.setItem(\n            \"MyCompletedDates\",\n            completedDatesValue\n          );\n        } catch (err) {\n          alert(err);\n        }\n      };\n    \n        save();\n      }, [state.completedDates]);\n\n  \n\n  useEffect(() => {\n    console.log(\"Count test: \", state.counts.exerciseCount);\n  })\n\n  return (\n    <ExerciseContext.Provider value={[state, setState]}>\n      {props.children}\n    </ExerciseContext.Provider>\n  );\n};\n\nexport { ExerciseContext, ExerciseProvider };\n"]},"metadata":{},"sourceType":"module"}